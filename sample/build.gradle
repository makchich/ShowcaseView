/*
 * Copyright 2014 Alex Curran
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
    google()
}

apply plugin: 'com.android.application'

dependencies {
    implementation project(':library')
    //compile 'com.github.amlcurran.showcaseview:library:5.0.0-SNAPSHOT'
    implementation 'com.android.support:support-v4:28.0.0'
    //compile 'com.nineoldandroids:library:2.4.0'
    implementation 'com.android.support:appcompat-v7:28.0.0'
}

android {
    compileSdkVersion Integer.parseInt(COMPILE_SDK)

    defaultConfig {
        versionName parseVersionName()
        versionCode Integer.parseInt(VERSION_CODE)
        targetSdkVersion Integer.parseInt(TARGET_SDK)
        minSdkVersion Integer.parseInt(MIN_SDK_SAMPLE)
    }

    signingConfigs {
        release {
            storeFile file(project.hasProperty("SHOWCASEVIEW_KEYSTORE_LOCATION") ? SHOWCASEVIEW_KEYSTORE_LOCATION : "/Users/amlcurran/.android/debug.keystore")
            storePassword returnDefault("SHOWCASEVIEW_KEYSTORE_PW")
            keyAlias returnDefault("SHOWCASEVIEW_KEY_ALIAS")
            keyPassword returnDefault("SHOWCASEVIEW_KEY_PW")
        }
    }

    lintOptions {
        abortOnError false
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

def returnDefault(String propertyName) {
   if (project.hasProperty(propertyName)) {
       return project.property(propertyName)
   } else {
       return ""
   }
}

def parseVersionName() {
    if (project.hasProperty("versionName")) {
        return project.property("versionName")
    } else {
        println("No version name supplied, using default")
        return "0"
    }
}
